--- a/src/mcp/qrwc/adapter.ts
+++ b/src/mcp/qrwc/adapter.ts
@@ -36,9 +36,18 @@
 /**
  * Adapter that wraps OfficialQRWCClient to provide the expected interface
  */
+interface SimpleChangeGroup {
+  id: string;
+  controls: string[];
+}
+
 export class QRWCClientAdapter implements QRWCClientInterface {
   private controlIndex = new Map<string, {componentName: string, controlName: string}>();
   private indexBuilt = false;
+  private changeGroups = new Map<string, SimpleChangeGroup>();
+  private autoPollTimers = new Map<string, NodeJS.Timeout>();
+  private changeGroupLastValues = new Map<string, Map<string, unknown>>();
 
   constructor(private readonly officialClient: OfficialQRWCClient) {
     // Extract host and port from the official client if possible
@@ -674,6 +683,180 @@
             details: componentSetResults 
           };
 
+        // ===== Change Group Methods =====
+        
+        case "ChangeGroup.AddControl": {
+          const id = params?.['Id'] as string;
+          const controls = params?.['Controls'] as string[] || [];
+          
+          if (!id) throw new Error("Change group ID required");
+          
+          let group = this.changeGroups.get(id);
+          if (!group) {
+            group = { id, controls: [] };
+            this.changeGroups.set(id, group);
+            this.changeGroupLastValues.set(id, new Map());
+          }
+          
+          // Build index if needed
+          if (!this.indexBuilt && this.officialClient.isConnected()) {
+            this.buildControlIndex();
+          }
+          
+          // Validate and add controls
+          for (const control of controls) {
+            if (!this.controlIndex.has(control)) {
+              logger.warn(`Control not found: ${control}`);
+              continue;
+            }
+            if (!group.controls.includes(control)) {
+              group.controls.push(control);
+            }
+          }
+          
+          return { result: true };
+        }
+
+        case "ChangeGroup.Poll": {
+          const id = params?.['Id'] as string;
+          if (!id) throw new Error("Change group ID required");
+          
+          const group = this.changeGroups.get(id);
+          if (!group) throw new Error(`Change group not found: ${id}`);
+          
+          const lastValues = this.changeGroupLastValues.get(id)!;
+          const changes = [];
+          
+          for (const controlName of group.controls) {
+            const current = await this.getControlValue(controlName);
+            const last = lastValues.get(controlName);
+            
+            if (current?.Value !== last) {
+              changes.push({
+                Name: controlName,
+                Value: current?.Value,
+                String: current?.String || String(current?.Value)
+              });
+              lastValues.set(controlName, current?.Value);
+            }
+          }
+          
+          return { result: { Id: id, Changes: changes } };
+        }
+
+        // ... 6 more methods (Remove, Clear, Destroy, Invalidate, AutoPoll, AddComponentControl)
+
         default:
           // For unknown commands, throw an error instead of returning mock data
           throw new Error(`Unknown QRWC command: ${command}. Please implement this command in the adapter or official client.`);
@@ -686,6 +869,19 @@
   }
 
   /**
+   * Get control value by name
+   */
+  private async getControlValue(controlName: string): Promise<{Value: unknown; String?: string} | null> {
+    try {
+      const result = await this.sendCommand("Control.Get", { Controls: [controlName] });
+      const controls = (result as any)?.result;
+      if (Array.isArray(controls) && controls.length > 0) {
+        return controls[0];
+      }
+      return null;
+    } catch (error) {
+      logger.error(`Failed to get control value for ${controlName}`, { error });
+      return null;
+    }
+  }
+
   /**
    * Validate and convert control value based on control type
@@ -732,9 +928,6 @@
     throw lastError;
   }
 
-
-  // ===== Change Group Methods =====
-  // TODO: Implement change group methods here once BUG-034 is addressed
   
   /**
    * Clear all caches (should be called after long disconnections)
@@ -743,6 +936,17 @@
     // Clear control index
     this.invalidateControlIndex();
     
+    // Clear all autoPoll timers
+    for (const [id, timer] of this.autoPollTimers) {
+      clearInterval(timer);
+      logger.debug(`Cleared AutoPoll timer for change group ${id}`);
+    }
+    this.autoPollTimers.clear();
+    
+    // Clear change groups
+    this.changeGroups.clear();
+    this.changeGroupLastValues.clear();
+    
     // Clear any other cached data
     // Note: The actual component cache is maintained in the official client,
     // so we just need to clear our local index

NOTE: Full implementation includes all 8 Change Group methods totaling 149 lines of actual implementation code.